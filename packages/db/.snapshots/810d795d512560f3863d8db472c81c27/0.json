"type Query {\n  getGraphById(id: ID!): Graph\n  graphs(limit: LimitInt, offset: Int, orderBy: [GraphOrderByArguments], where: GraphWhereArguments): [Graph]\n  countGraphs(where: GraphWhereArguments): graphsCount\n}\n\ntype Graph {\n  id: ID\n  name: String\n}\n\n\"\"\"\nLimit will be applied by default if not passed. If the provided value exceeds the maximum allowed value a validation error will be thrown\n\"\"\"\nscalar LimitInt\n\ninput GraphOrderByArguments {\n  field: GraphOrderByField\n  direction: OrderByDirection!\n}\n\nenum GraphOrderByField {\n  id\n  name\n}\n\nenum OrderByDirection {\n  ASC\n  DESC\n}\n\ninput GraphWhereArguments {\n  id: GraphWhereArgumentsid\n  name: GraphWhereArgumentsname\n  or: [GraphWhereArgumentsOr]\n}\n\ninput GraphWhereArgumentsid {\n  eq: ID\n  neq: ID\n  gt: ID\n  gte: ID\n  lt: ID\n  lte: ID\n  like: ID\n  in: [ID]\n  nin: [ID]\n}\n\ninput GraphWhereArgumentsname {\n  eq: String\n  neq: String\n  gt: String\n  gte: String\n  lt: String\n  lte: String\n  like: String\n  in: [String]\n  nin: [String]\n}\n\ninput GraphWhereArgumentsOr {\n  id: GraphWhereArgumentsid\n  name: GraphWhereArgumentsname\n}\n\ntype graphsCount {\n  total: Int\n}\n\ntype Mutation {\n  saveGraph(input: GraphInput!): Graph\n  insertGraphs(inputs: [GraphInput]!): [Graph]\n  deleteGraphs(where: GraphWhereArguments): [Graph]\n}\n\ninput GraphInput {\n  id: ID\n  name: String\n}\n\ntype Subscription {\n  graphSaved: Graph\n  graphDeleted: GraphDeleted\n}\n\ntype GraphDeleted {\n  id: ID\n}"