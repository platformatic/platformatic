Create a Fastify plugin that exposes a client for a remote OpenAPI or GraphQL API.

To create a client for a remote OpenAPI API, you can use the following command:

```bash
$ platformatic client http://example.com/to/schema/file -n myclient
```

To create a client for a remote Graphql API, you can use the following command:

```bash
$ platformatic client http://example.com/graphql -n myclient
```

Instead of an URL, you can also use a local file:

```bash
$ platformatic client path/to/schema -n myclient
```

To create a client for a service running in a Platformatic runime use the following command:
```bash
$ platformatic client --runtime SERVICE_NAME -n myclient
```

All the above commands will create a Fastify plugin that exposes a client in the `request` object for the remote API in a folder `myclient` and a file named myclient.js inside it.

If platformatic config file is specified, it will be edited and a `clients` section will be added.
Then, in any part of your Platformatic application you can use the client.

You can use the client in your application in Javascript, calling a GraphQL endpoint:

```js
module.exports = async function (app, opts) {
  app.post('/', async (request, reply) => {
    const res = await request.myclient.graphql({
      query: 'query { hello }'
    })
    return res
  })
}
```

or in Typescript, calling an OpenAPI endpoint:


```ts
import { FastifyInstance } from 'fastify'
/// <reference path="./myclient" />

export default async function (app: FastifyInstance) {
  app.get('/', async (request, reply) => {
    return request.myclient.get({})
  })
}
```

You can generate only the types with the --types-only flag.

```bash
$ platformatic client http://exmaple.com/to/schema/file --name myclient --types-only
```

Will create the single myclient.d.ts file.

Options:

* `-c, --config <path>` - Path to the configuration file.
* `-n, --name <name>` - Name of the client.
* `-f, --folder <name>` - Name of the plugin folder, defaults to --name value.
* `-t, --typescript` - Generate the client plugin in TypeScript.
* `-R, --runtime <serviceId>` - Generate the client for the `serviceId` running in the current runtime
* `--frontend` - Generated a browser-compatible client that uses `fetch`
* `--full-response` - Client will return full response object rather than just the body.
* `--full-request` - Client will be called with all parameters wrapped in `body`, `headers` and `query` properties. Ignored if `--frontend`
* `--full` - Enables both `--full-request` and `--full-response` overriding them.
* `--optional-headers <headers>` - Comma separated string of headers that will be marked as optional in the type file. Ignored if `--frontend`
* `--validate-response` - If set, will validate the response body against the schema. Ignored if `--frontend`
* `--language js|ts` - Generate a Javascript or Typescript frontend client. Only works if `--frontend`
* `--url-auth-headers <stringify-headers>` - When the Open API schema is passed as URL (instead of static file) this property allow to pass authorization headers. Headers should be passed as `string` (e.g. `'{"authorization":"42"}'`).
* `--types-only` - Generate only the type file.