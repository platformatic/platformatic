import { createDirectory, safeRemove } from '@platformatic/utils'
import { ok } from 'node:assert'
import { relative, resolve, sep } from 'node:path'
import { test } from 'node:test'
import { prepareRuntime, temporaryFolder } from '../../basic/test/helper.js'
import { appendEnvVariable } from '../lib/commands/external.js'
import { wattpm } from './helper.js'

test('resolve - should clone a URL when the environment variable is set to a folder inside the repo', async t => {
  const { root: rootDir } = await prepareRuntime(t, 'main', false, 'watt.json')
  t.after(() => safeRemove(rootDir))

  process.chdir(rootDir)
  await wattpm('import', rootDir, '-h', '-i', 'resolved', 'platformatic/wattpm-fixtures')
  appendEnvVariable(resolve(rootDir, '.env'), 'PLT_SERVICE_RESOLVED_PATH', 'web/resolved')

  const resolveProcess = await wattpm('resolve', rootDir)

  ok(
    resolveProcess.stdout.includes(`Cloning https://github.com/platformatic/wattpm-fixtures.git into web${sep}resolved`)
  )
  ok(resolveProcess.stdout.includes('Installing dependencies for service resolved ...'))
})

test('resolve - should clone a URL when the environment variable is not set', async t => {
  const { root: rootDir } = await prepareRuntime(t, 'main', false, 'watt.json')

  process.chdir(rootDir)
  await wattpm('import', rootDir, '-h', '-i', 'resolved', 'platformatic/wattpm-fixtures')

  const resolveProcess = await wattpm('resolve', rootDir)

  ok(
    resolveProcess.stdout.includes(
      `Cloning https://github.com/platformatic/wattpm-fixtures.git into ${relative(rootDir, 'external/resolved')}`
    )
  )
  ok(resolveProcess.stdout.includes('Installing dependencies for service resolved ...'))
})

test('resolve - should do nothing when the directory already exists inside the repo', async t => {
  const { root: rootDir } = await prepareRuntime(t, 'main', false, 'watt.json')
  t.after(() => safeRemove(rootDir))

  process.chdir(rootDir)
  await wattpm('import', rootDir, '-h', '-i', 'resolved', 'platformatic/wattpm-fixtures')

  const envValue = resolve(rootDir, 'whatever')
  await createDirectory(envValue)
  await appendEnvVariable(resolve(rootDir, '.env'), 'PLT_SERVICE_RESOLVED_PATH', 'whatever')

  const resolveProcess = await wattpm('resolve', rootDir)
  ok(!resolveProcess.stdout.includes('Cloning https://github.com/platformatic/wattpm-fixtures.git'))
  ok(!resolveProcess.stdout.includes('Installing dependencies for service resolved ...'))
})

test('resolve - should do nothing when the directory already exists outside the repo', async t => {
  const { root: rootDir } = await prepareRuntime(t, 'main', false, 'watt.json')
  t.after(() => safeRemove(rootDir))

  process.chdir(rootDir)
  await wattpm('import', rootDir, '-h', '-i', 'resolved', 'platformatic/wattpm-fixtures')

  const envValue = resolve(temporaryFolder, 'outside-' + Date.now())
  await createDirectory(envValue)
  await appendEnvVariable(resolve(rootDir, '.env'), 'PLT_SERVICE_RESOLVED_PATH', envValue)

  const resolveProcess = await wattpm('resolve', rootDir)
  ok(!resolveProcess.stdout.includes('Cloning https://github.com/platformatic/wattpm-fixtures.git'))
  ok(!resolveProcess.stdout.includes('Installing dependencies for service resolved ...'))
})

test('resolve - should do nothing when the autogenerated directory already exists inside the repo', async t => {
  const { root: rootDir } = await prepareRuntime(t, 'main', false, 'watt.json')
  t.after(() => safeRemove(rootDir))

  process.chdir(rootDir)
  await wattpm('import', rootDir, '-h', '-i', 'resolved', 'platformatic/wattpm-fixtures')
  await createDirectory(resolve(rootDir, 'external/resolved'))

  const resolveProcess = await wattpm('resolve', rootDir)
  ok(!resolveProcess.stdout.includes('Cloning https://github.com/platformatic/wattpm-fixtures.git'))
  ok(!resolveProcess.stdout.includes('Installing dependencies for service resolved ...'))
  ok(
    resolveProcess.stdout.includes(
      `Skipping service resolved as the generated path external${sep}resolved already exists.`
    ),
    resolveProcess.stdout
  )
})

test('resolve - should throw an error when the directory outside the repo do not exist', async t => {
  const { root: rootDir } = await prepareRuntime(t, 'main', false, 'watt.json')
  t.after(() => safeRemove(rootDir))

  process.chdir(rootDir)
  await wattpm('import', rootDir, '-h', '-i', 'resolved', 'platformatic/wattpm-fixtures')

  const envValue = resolve(temporaryFolder, 'outside-' + Date.now())
  await appendEnvVariable(resolve(rootDir, '.env'), 'PLT_SERVICE_RESOLVED_PATH', envValue)

  const resolveProcess = await wattpm('resolve', rootDir, { reject: false })
  ok(!resolveProcess.stdout.includes('Cloning https://github.com/platformatic/wattpm-fixtures.git'))
  ok(!resolveProcess.stdout.includes('Installing dependencies for service resolved ...'))
  ok(
    resolveProcess.stdout.includes(
      `Skipping service resolved as the non existent directory ${envValue} is outside the project directory.`
    )
  )
})

// Note that this test purposely uses gitlab to have a HTTP authentication error, GitHub ignores those parameters
test('resolve - should attempt to clone with username and password', async t => {
  const { root: rootDir } = await prepareRuntime(t, 'main', false, 'watt.json')
  t.after(() => safeRemove(rootDir))

  process.chdir(rootDir)
  await wattpm('import', rootDir, '-i', 'resolved', 'https://gitlab.com/platformatic/wattpm-fixtures.git')
  const resolveProcess = await wattpm('resolve', '-u', 'foo', '-p', 'bar', rootDir, { reject: false })

  ok(resolveProcess.stdout.includes('Cloning https://gitlab.com/platformatic/wattpm-fixtures.git'))
  ok(resolveProcess.stdout.includes(`Cloning into '${resolve(rootDir, 'external/resolved')}'`))
  ok(resolveProcess.stdout.includes('HTTP Basic: Access denied'))
})
