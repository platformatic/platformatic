name: run tests

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - 'signatures/**'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - 'signatures/**'

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"
  cancel-in-progress: true

env:
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

jobs:
  setup-node_modules:
    runs-on: ${{matrix.os}}
    timeout-minutes: 15
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2.2.4
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm'
      - name: pnpm fetch
        run: pnpm fetch --ignore-scripts

  ci-cli:
    needs: setup-node_modules
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      matrix:
        node-version: [16, 18]
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v3
    - uses: pnpm/action-setup@v2.2.4
    - uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    - name: pnpm install
      run: pnpm install --frozen-lockfile
    - name: Run test suite
      run: cd packages/cli && pnpm test

  ci-db-dashboard:
    needs: setup-node_modules
    runs-on: ${{matrix.os}}
    timeout-minutes: 15
    strategy:
      matrix:
        node-version: [16, 18]
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v3
    - uses: pnpm/action-setup@v2.2.4
    - uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    - name: pnpm install
      run: pnpm install --frozen-lockfile
    - name: Builds the ra-data-rest
      run: pnpm run ra-data-rest build
    - name: Builds the dashboard
      run: pnpm run dashboard:build
    - name: Run test suite Dashboard
      run: cd packages/db-dashboard && pnpm test

  ci-config:
    needs: setup-node_modules
    runs-on: ${{matrix.os}}
    timeout-minutes: 15
    strategy:
      matrix:
        node-version: [16, 18]
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v3
    - uses: pnpm/action-setup@v2.2.4
    - uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    - name: pnpm install
      run: pnpm install --frozen-lockfile  
    - name: Run test suite config manager
      run: cd packages/config && pnpm test

  ci-db:
    needs: setup-node_modules
    runs-on: ${{matrix.os}}
    timeout-minutes: 15
    strategy:
      matrix:
        node-version: [16, 18]
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v3
    - uses: pnpm/action-setup@v2.2.4
    - uses: ikalnytskyi/action-setup-postgres@v3
    - uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    - name: pnpm install
      run: pnpm install --frozen-lockfile  
    - name: pnpm install -g typescript
      run: pnpm install -g typescript 
    - name: Builds the ra-data-rest
      run: pnpm run ra-data-rest build
    - name: Builds the dashboard
      run: pnpm run dashboard:build
    - name: Run test suite core
      run: cd packages/db-core && pnpm test
    - name: Run test suite Platformatic DB
      run: cd packages/db && pnpm test

  ci-db-authorization:
    needs: setup-node_modules
    runs-on: ${{matrix.os}}
    timeout-minutes: 5
    strategy:
      matrix:
        node-version: [16, 18]
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v3
    - uses: pnpm/action-setup@v2.2.4
    - uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    - name: Start docker containers for testing
      run: docker-compose up -d postgresql
    - name: pnpm install
      run: pnpm install --frozen-lockfile  
    - name: Run test suite
      run: cd packages/db-authorization && pnpm test

  ci-db-core-lint:
    needs: setup-node_modules
    runs-on: ${{matrix.os}}
    timeout-minutes: 5
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v3
    - uses: pnpm/action-setup@v2.2.4
    - uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'pnpm'
    - name: pnpm install
      run: pnpm install --frozen-lockfile  
    - name: Linting & Typescript for test suite sql-mapper
      run: |
        pnpm --filter="@platformatic/sql-mapper" run lint
        pnpm --filter="@platformatic/sql-mapper" run test:typescript
    - name: Linting & Typescript for test suite sql-json-schema-mapper
      run: |
        pnpm --filter="@platformatic/sql-json-schema-mapper" run lint
        pnpm --filter="@platformatic/sql-json-schema-mapper" run test:typescript
    - name: Linting & Typescript for test suite sql-openapi
      run: |
        pnpm --filter="@platformatic/sql-openapi" run lint
        pnpm --filter="@platformatic/sql-openapi" run test:typescript
    - name: Linting & Typescript for test suite sql-graphql
      run: |
        pnpm --filter="@platformatic/sql-graphql" run lint
        pnpm --filter="@platformatic/sql-graphql" run test:typescript
    - name: Linting & Typescript for test suite sql-events
      run: |
        pnpm --filter="@platformatic/sql-events" run lint
        pnpm --filter="@platformatic/sql-events" run test:typescript

  ci-db-core-test:
    needs: setup-node_modules
    runs-on: ${{matrix.os}}
    timeout-minutes: 10 
    strategy:
      matrix:
        db: [postgresql, mariadb, mysql, mysql8, sqlite]
        node-version: [16, 18]
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v3
    - uses: pnpm/action-setup@v2.2.4
    - uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    - name: Start docker containers for testing
      run: docker-compose up -d ${{ matrix.db }}
      if: ${{ matrix.db != 'sqlite' }}
    - name: pnpm install
      run: pnpm install --frozen-lockfile  
    - name: Wait for DB
      run: sleep 10
      if: ${{ matrix.db != 'sqlite' }}
    - name: Run test suite sql-mapper
      run: cd packages/sql-mapper && pnpm run test:${{ matrix.db }}; cd ../..
    - name: Run test suite sql-json-schema-mapper
      run: cd packages/sql-json-schema-mapper && pnpm run test:${{ matrix.db }}; cd ../..
    - name: Run test suite sql-openapi
      run: cd packages/sql-openapi && pnpm run test:${{ matrix.db }}; cd ../..
    - name: Run test suite sql-graphql
      run: cd packages/sql-graphql && pnpm run test:${{ matrix.db }}; cd ..

  ci-sql-events:
    needs: setup-node_modules
    runs-on: ${{matrix.os}}
    timeout-minutes: 10
    strategy:
      matrix:
        db: [postgresql, mariadb, mysql, mysql8, sqlite]
        node-version: [16, 18]
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v3
    - uses: pnpm/action-setup@v2.2.4
    - uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    - name: Start docker containers for testing
      run: docker-compose up -d ${{ matrix.db }}
      if: ${{ matrix.db != 'sqlite' }}
    - name: Start redis containers for testing
      run: docker-compose up -d redis
    - name: pnpm install
      run: pnpm install --frozen-lockfile  
    - name: Wait for DB
      run: sleep 10
      if: ${{ matrix.db != 'sqlite' }}
    - name: Run test suite sql-mapper
      run: cd packages/sql-events && pnpm run test:${{ matrix.db }}; cd ../..

  ci-auth-login:
    needs: setup-node_modules
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      matrix:
        node-version: [16, 18]
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2.2.4
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      - name: pnpm install
        run: pnpm install --frozen-lockfile  
      - name: Run test suite
        run: cd packages/authenticate && pnpm test; cd ../..

  ci-service:
    needs: setup-node_modules
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      matrix:
        node-version: [16, 18]
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2.2.4
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      - name: pnpm install
        run: pnpm install --frozen-lockfile  
      - name: Run test suite
        run: cd packages/service && pnpm test; cd ../..

  playwright-e2e:
    needs: setup-node_modules
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v3
    - uses: pnpm/action-setup@v2.2.4
    - uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    - name: Start docker containers for testing
      run: docker-compose up -d postgresql
    - name: pnpm install
      run: pnpm install --frozen-lockfile
    - name: Builds the ra-data-rest
      run: pnpm run ra-data-rest build
    - name: Builds the dashboard
      run: pnpm run dashboard:build
    - name: Install Playwright browsers
      run: cd packages/db-dashboard && pnpm exec playwright install
    - name: Wait for DB
      run: sleep 10
    - name: Run Platformatic DB server and E2E tests
      run: |
        node ./packages/cli/cli.js db --config=./packages/db-dashboard/test/e2e/fixtures/e2e-test-config.json &
        sleep 5 &&
        cd packages/db-dashboard && pnpm run test:e2e
